{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nexport let TodoListComponent = class TodoListComponent {\n  constructor(todoService) {\n    this.todoService = todoService;\n    this.todoList = [];\n    this.novoItemNome = '';\n    this.itemEditandoId = null;\n  }\n  ngOnInit() {\n    this.todoService.getTodoList().subscribe(data => {\n      this.todoList = data;\n    });\n  }\n  loadTodoList() {\n    this.todoService.getTodoList().subscribe(data => {\n      this.todoList = data;\n    });\n  }\n  adicionarNovoItem() {\n    const novoItem = {\n      TodolistaNome: this.novoItemNome\n    };\n    this.todoService.addTodoItem(novoItem).subscribe(() => {\n      this.novoItemNome = ''; // Limpa o campo de entrada\n      this.loadTodoList(); // Atualiza a lista após a adição bem-sucedida\n    });\n  }\n\n  remover(todoId) {\n    this.todoService.deleteTodoItem(todoId).subscribe(() => {\n      // Após a remoção bem-sucedida, atualize a lista ou faça outras ações necessárias.\n      this.todoList = this.todoList.filter(item => item.TodolistaId !== todoId);\n    });\n  }\n  editar(todo) {\n    this.novoItemNome = todo.TodolistaNome; // Preenche o campo de edição com o nome do item\n    this.itemEditandoId = todo.TodolistaId; // Armazena o ID do item que está sendo editado\n  }\n\n  salvarEdicao() {\n    const itemEditado = {\n      TodolistaId: this.itemEditandoId,\n      TodolistaNome: this.novoItemNome\n    };\n    this.todoService.editarTodoItem(itemEditado).subscribe(() => {\n      this.novoItemNome = ''; // Limpa o campo de entrada\n      this.itemEditandoId = null; // Limpa o ID do item em edição\n      this.loadTodoList(); // Atualiza a lista após a edição bem-sucedida\n    });\n  }\n};\n\nTodoListComponent = __decorate([Component({\n  selector: 'app-todo-list',\n  templateUrl: './todo-list.component.html',\n  styleUrls: ['./todo-list.component.css']\n})], TodoListComponent);","map":{"version":3,"names":["Component","TodoListComponent","constructor","todoService","todoList","novoItemNome","itemEditandoId","ngOnInit","getTodoList","subscribe","data","loadTodoList","adicionarNovoItem","novoItem","TodolistaNome","addTodoItem","remover","todoId","deleteTodoItem","filter","item","TodolistaId","editar","todo","salvarEdicao","itemEditado","editarTodoItem","__decorate","selector","templateUrl","styleUrls"],"sources":["J:\\Site Node\\Teste Todo\\Angular\\FrontFinal\\src\\app\\todo-list\\todo-list.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { TodoService } from '../todo.service';\n\n@Component({\n  selector: 'app-todo-list',\n  templateUrl: './todo-list.component.html',\n  styleUrls: ['./todo-list.component.css'],\n})\nexport class TodoListComponent implements OnInit {\n  todoList: any[] = [];\n  novoItemNome: string = '';\n  itemEditandoId: number | null = null;\n\n\n  constructor(private todoService: TodoService) {}\n\n  ngOnInit() {\n    this.todoService.getTodoList().subscribe((data: any) => {\n      this.todoList = data as any[];\n    });\n  }\n\n  loadTodoList() {\n    this.todoService.getTodoList().subscribe((data: any) => {\n      this.todoList = data;\n    });\n  }\n\n  adicionarNovoItem() {\n    const novoItem = {\n      TodolistaNome: this.novoItemNome,\n    };\n\n    this.todoService.addTodoItem(novoItem).subscribe(() => {\n      this.novoItemNome = ''; // Limpa o campo de entrada\n      this.loadTodoList(); // Atualiza a lista após a adição bem-sucedida\n    });\n  }\n\n  remover(todoId: number) {\n    this.todoService.deleteTodoItem(todoId).subscribe(() => {\n      // Após a remoção bem-sucedida, atualize a lista ou faça outras ações necessárias.\n      this.todoList = this.todoList.filter((item) => item.TodolistaId !== todoId);\n    });\n  }\n\n  editar(todo: any) {\n    this.novoItemNome = todo.TodolistaNome; // Preenche o campo de edição com o nome do item\n    this.itemEditandoId = todo.TodolistaId; // Armazena o ID do item que está sendo editado\n  }\n\n  salvarEdicao() {\n    const itemEditado = {\n      TodolistaId: this.itemEditandoId,\n      TodolistaNome: this.novoItemNome,\n    };\n  \n    this.todoService.editarTodoItem(itemEditado).subscribe(() => {\n      this.novoItemNome = ''; // Limpa o campo de entrada\n      this.itemEditandoId = null; // Limpa o ID do item em edição\n      this.loadTodoList(); // Atualiza a lista após a edição bem-sucedida\n    });\n  }\n\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAQ1C,WAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAM5BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;IAL/B,KAAAC,QAAQ,GAAU,EAAE;IACpB,KAAAC,YAAY,GAAW,EAAE;IACzB,KAAAC,cAAc,GAAkB,IAAI;EAGW;EAE/CC,QAAQA,CAAA;IACN,IAAI,CAACJ,WAAW,CAACK,WAAW,EAAE,CAACC,SAAS,CAAEC,IAAS,IAAI;MACrD,IAAI,CAACN,QAAQ,GAAGM,IAAa;IAC/B,CAAC,CAAC;EACJ;EAEAC,YAAYA,CAAA;IACV,IAAI,CAACR,WAAW,CAACK,WAAW,EAAE,CAACC,SAAS,CAAEC,IAAS,IAAI;MACrD,IAAI,CAACN,QAAQ,GAAGM,IAAI;IACtB,CAAC,CAAC;EACJ;EAEAE,iBAAiBA,CAAA;IACf,MAAMC,QAAQ,GAAG;MACfC,aAAa,EAAE,IAAI,CAACT;KACrB;IAED,IAAI,CAACF,WAAW,CAACY,WAAW,CAACF,QAAQ,CAAC,CAACJ,SAAS,CAAC,MAAK;MACpD,IAAI,CAACJ,YAAY,GAAG,EAAE,CAAC,CAAC;MACxB,IAAI,CAACM,YAAY,EAAE,CAAC,CAAC;IACvB,CAAC,CAAC;EACJ;;EAEAK,OAAOA,CAACC,MAAc;IACpB,IAAI,CAACd,WAAW,CAACe,cAAc,CAACD,MAAM,CAAC,CAACR,SAAS,CAAC,MAAK;MACrD;MACA,IAAI,CAACL,QAAQ,GAAG,IAAI,CAACA,QAAQ,CAACe,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,WAAW,KAAKJ,MAAM,CAAC;IAC7E,CAAC,CAAC;EACJ;EAEAK,MAAMA,CAACC,IAAS;IACd,IAAI,CAAClB,YAAY,GAAGkB,IAAI,CAACT,aAAa,CAAC,CAAC;IACxC,IAAI,CAACR,cAAc,GAAGiB,IAAI,CAACF,WAAW,CAAC,CAAC;EAC1C;;EAEAG,YAAYA,CAAA;IACV,MAAMC,WAAW,GAAG;MAClBJ,WAAW,EAAE,IAAI,CAACf,cAAc;MAChCQ,aAAa,EAAE,IAAI,CAACT;KACrB;IAED,IAAI,CAACF,WAAW,CAACuB,cAAc,CAACD,WAAW,CAAC,CAAChB,SAAS,CAAC,MAAK;MAC1D,IAAI,CAACJ,YAAY,GAAG,EAAE,CAAC,CAAC;MACxB,IAAI,CAACC,cAAc,GAAG,IAAI,CAAC,CAAC;MAC5B,IAAI,CAACK,YAAY,EAAE,CAAC,CAAC;IACvB,CAAC,CAAC;EACJ;CAED;;AAxDYV,iBAAiB,GAAA0B,UAAA,EAL7B3B,SAAS,CAAC;EACT4B,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,C,EACW7B,iBAAiB,CAwD7B"},"metadata":{},"sourceType":"module","externalDependencies":[]}